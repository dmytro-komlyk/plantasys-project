// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type Metadata {
  description String
  keywords    String
  title       String
}

type ImagesFile {
  destination   String
  encoding      String
  fieldname     String
  filename      String
  mimetype      String
  originalname  String
  path          String
  size          Int
}

type InfoCard {
  title         String
  description   String
}

model CardProduct {
  id                 String          @id @default(auto()) @map("_id") @db.ObjectId
  title              String
  preview            String
  image              Image           @relation(fields: [image_id], references: [id], name: "card_product_image")
  image_id           String          @db.ObjectId
  tags               String[]
  gallery            Image[]         @relation(fields: [gallery_ids], references: [id], name: "card_product_gallery")
  gallery_ids        String[]        @db.ObjectId
  info               InfoCard[]
  product_line       ProductLine     @relation(fields: [product_line_id], references: [id])
  product_line_id    String          @db.ObjectId

  @@map("cards_product")
}

model ProductLine {
  id            String            @id @default(auto()) @map("_id") @db.ObjectId
  slug          String
  title         String
  tagline       String
  description   String
  metadata      Metadata
  banner        Image           @relation(fields: [banner_id], references: [id], name: "product_banner")
  banner_id     String          @db.ObjectId
  cards         CardProduct[]
  line          Line?           @relation(fields: [line_id], references: [id])
  line_id       String          @db.ObjectId

  @@map("products_line")          
}

model Line {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  slug              String
  title             String
  description       String
  metadata          Metadata
  banner            Image           @relation(fields: [banner_id], references: [id], name: "line_banner")
  banner_id         String          @db.ObjectId
  products          ProductLine[]
  category          Category?        @relation(fields: [category_id], references: [id])
  category_id       String          @db.ObjectId

  @@map("lines")   
}

model ProductBooster {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  slug              String
  title             String
  tagline           String
  description       String
  metadata          Metadata
  category          Category        @relation(fields: [category_id], references: [id])
  category_id       String          @db.ObjectId
 
  @@map("products_booster")          
}

model Category {
  id                    String            @id @default(auto()) @map("_id") @db.ObjectId
  slug                  String
  title                 String
  description           String
  metadata              Metadata
  lines                 Line[]
  products_booster      ProductBooster[]

  @@map("categories")   
}

model Image {
  id                        String            @id @default(auto()) @map("_id") @db.ObjectId
  alt                       String
  file                      ImagesFile
  type                      String
  product_banner            ProductLine[]     @relation("product_banner")
  line_banner               Line[]            @relation("line_banner")
  card_product_image        CardProduct[]     @relation("card_product_image")
  card_product_gallery      CardProduct[]     @relation(fields: [card_product_gallery_ids], references: [id], name: "card_product_gallery")
  card_product_gallery_ids  String[]          @db.ObjectId

  @@map("images")
}

model User {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  password      String?

  @@map("users")
}

// model Account {
//   id                 String  @id @default(auto()) @map("_id") @db.ObjectId
//   user_id            String  @db.ObjectId
//   type               String
//   provider           String
//   providerAccountId  String
//   refresh_token      String?  @db.String
//   access_token       String?  @db.String
//   expires_at         Int?
//   token_type         String?
//   scope              String?
//   id_token           String?  @db.String
//   session_state      String?

//   user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

// model Session {
//   id           String  @id @default(auto()) @map("_id") @db.ObjectId
//   sessionToken String  @unique
//   user_id      String  @db.ObjectId 
//   expires      DateTime
//   user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
// }

// model VerificationToken {
//   id         String  @id @default(auto()) @map("_id") @db.ObjectId
//   token      String   @unique
//   expires    DateTime
// }